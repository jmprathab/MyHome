openapi: 3.0.2
servers:
  - url: http://localhost:8080/
info:
  description: This is a OpenApi specification for MyHome backend service.
  version: 2.0.0
  title: Swagger MyHome - OpenAPI 3.0
tags:
  - name: Users
  - name: Documents
  - name: Communities
paths:
  /users:
    post:
      tags:
        - Users
      description: "Create a new user"
      operationId: signUp
      requestBody:
        description: CreateUserRequest aggregate fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: "if user created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '409':
          description: "if user already exists"
    get:
      tags:
        - Users
      description: "Lists all users"
      operationId: listAllUsers
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: "Returns list of users"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponse'
  /users/{userId}:
    get:
      tags:
        - Users
      description: "Get details of a user given userId"
      operationId: getUserDetails
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user to get
      responses:
        '200':
          description: "If userId is valid. Response body has the details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponseUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponseUser'
        '404':
          description: "If userId is invalid"
  /members/{memberId}/documents:
    get:
      tags:
        - Documents
      description: Returns house member's documents
      operationId: getHouseMemberDocument
      parameters:
        - in: path
          name: memberId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: if document present
          content:
            image/jpeg:
              schema:
                type: string
                format: byte
        '404':
          description: if params are invalid
    post:
      tags:
        - Documents
      description: Add house member's documents
      operationId: uploadHouseMemberDocument
      parameters:
        - in: path
          name: memberId
          schema:
            type: string
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                memberDocument:
                  type: string
                  format: binary
      responses:
        '204':
          description: if document saved
        '409':
          description: if document save error
        '413':
          description: if document file too large
        '404':
          description: if params are invalid
    put:
      tags:
        - Documents
      description: Update house member's documents
      operationId: updateHouseMemberDocument
      parameters:
        - in: path
          name: memberId
          schema:
            type: string
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                memberDocument:
                  type: string
                  format: binary
      responses:
        '204':
          description: if document updated
        '409':
          description: if document update error
        '413':
          description: if document file too large
        '404':
          description: if params are invalid
    delete:
      tags:
        - Documents
      description: Delete house member's documents
      operationId: deleteHouseMemberDocument
      parameters:
        - in: path
          name: memberId
          schema:
            type: string
          required: true
      responses:
        '204':
          description: if document deleted
        '404':
          description: if params are invalid
  /communities:
    post:
      tags:
        - Communities
      description: Create a new community
      operationId: createCommunity
      requestBody:
        description: CreateCommunityRequest aggregate fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunityRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateCommunityRequest'
      responses:
        '201':
          description: if community was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommunityResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreateCommunityResponse'
    get:
      tags:
        - Communities
      description: List all communities which are registered
      operationId: listAllCommunity
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Returns list of communities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityDetailsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetCommunityDetailsResponse'
  /communities/{communityId}:
    get:
      tags:
        - Communities
      description: Get details about the community given a community id
      operationId: listCommunityDetails
      parameters:
        - in: path
          name: communityId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: if community exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityDetailsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetCommunityDetailsResponse'
        '404':
          description: if params are invalid
    delete:
      tags:
        - Communities
      description: Deletion community with given community id
      operationId: deleteCommunity
      parameters:
        - in: path
          name: communityId
          schema:
            type: string
          required: true
      responses:
        '204':
          description: if community was removed
        '404':
          description: if params are invalid
  /communities/{communityId}/admins:
    get:
      tags:
        - Communities
      description: List all admins of the community given a community id
      operationId: listCommunityAdmins
      parameters:
        - in: path
          name: communityId
          schema:
            type: string
          required: true
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: if community exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommunityAdminsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ListCommunityAdminsResponse'
        '404':
          description: if params are invalid
    post:
      tags:
        - Communities
      description: Add a new admin to the community given a community id
      operationId: addCommunityAdmins
      parameters:
        - in: path
          name: communityId
          schema:
            type: string
          required: true
      requestBody:
        description: AddCommunityAdminRequest aggregate fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommunityAdminRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddCommunityAdminRequest'
      responses:
        '204':
          description: if admins were created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommunityAdminResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AddCommunityAdminResponse'
        '404':
          description: if params are invalid
components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 80
    CreateUserResponse:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
    GetUserDetailsResponse:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/GetUserDetailsResponseUser'
    GetUserDetailsResponseUser:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
        communityIds:
          type: array
          uniqueItems: true
          items:
            type: string
    Pageable:
      description: Pageable query parameters
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
    CreateCommunityRequest:
      type: object
      required:
        - name
        - district
      properties:
        name:
          type: string
        district:
          type: string
    CreateCommunityResponse:
      type: object
      required:
        - communityId
      properties:
        communityId:
          type: string
    GetCommunityDetailsResponse:
      type: object
      required:
        - communities
      properties:
        communities:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/GetCommunityDetailsResponseCommunity'
    GetCommunityDetailsResponseCommunity:
      type: object
      properties:
        communityId:
          type: string
        name:
          type: string
        district:
          type: string
    ListCommunityAdminsResponse:
      type: object
      required:
        - admins
      properties:
        admins:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ListCommunityAdminsResponseCommunityAdmin'
    ListCommunityAdminsResponseCommunityAdmin:
      type: object
      properties:
        adminId:
          type: string
    AddCommunityAdminRequest:
      type: object
      required:
        - admins
      properties:
        admins:
          type: array
          uniqueItems: true
          items:
            type: string
    AddCommunityAdminResponse:
      type: object
      required:
        - admins
      properties:
        admins:
          type: array
          uniqueItems: true
          items:
            type: string