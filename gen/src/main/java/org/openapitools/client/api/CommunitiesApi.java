/*
 * Swagger MyHome - OpenAPI 3.0
 * This is a OpenApi specification for MyHome backend service.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddCommunityAdminRequest;
import org.openapitools.client.model.AddCommunityAdminResponse;
import org.openapitools.client.model.CreateCommunityRequest;
import org.openapitools.client.model.CreateCommunityResponse;
import org.openapitools.client.model.GetCommunityDetailsResponse;
import org.openapitools.client.model.ListCommunityAdminsResponse;
import org.openapitools.client.model.Pageable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommunitiesApi {
    private ApiClient localVarApiClient;

    public CommunitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommunitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCommunityAdmins
     * @param communityId  (required)
     * @param addCommunityAdminRequest AddCommunityAdminRequest aggregate fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admins were created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommunityAdminsCall(String communityId, AddCommunityAdminRequest addCommunityAdminRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addCommunityAdminRequest;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/admins"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommunityAdminsValidateBeforeCall(String communityId, AddCommunityAdminRequest addCommunityAdminRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling addCommunityAdmins(Async)");
        }
        
        // verify the required parameter 'addCommunityAdminRequest' is set
        if (addCommunityAdminRequest == null) {
            throw new ApiException("Missing the required parameter 'addCommunityAdminRequest' when calling addCommunityAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = addCommunityAdminsCall(communityId, addCommunityAdminRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add a new admin to the community given a community id
     * @param communityId  (required)
     * @param addCommunityAdminRequest AddCommunityAdminRequest aggregate fields (required)
     * @return AddCommunityAdminResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admins were created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public AddCommunityAdminResponse addCommunityAdmins(String communityId, AddCommunityAdminRequest addCommunityAdminRequest) throws ApiException {
        ApiResponse<AddCommunityAdminResponse> localVarResp = addCommunityAdminsWithHttpInfo(communityId, addCommunityAdminRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new admin to the community given a community id
     * @param communityId  (required)
     * @param addCommunityAdminRequest AddCommunityAdminRequest aggregate fields (required)
     * @return ApiResponse&lt;AddCommunityAdminResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admins were created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddCommunityAdminResponse> addCommunityAdminsWithHttpInfo(String communityId, AddCommunityAdminRequest addCommunityAdminRequest) throws ApiException {
        okhttp3.Call localVarCall = addCommunityAdminsValidateBeforeCall(communityId, addCommunityAdminRequest, null);
        Type localVarReturnType = new TypeToken<AddCommunityAdminResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new admin to the community given a community id
     * @param communityId  (required)
     * @param addCommunityAdminRequest AddCommunityAdminRequest aggregate fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admins were created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommunityAdminsAsync(String communityId, AddCommunityAdminRequest addCommunityAdminRequest, final ApiCallback<AddCommunityAdminResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommunityAdminsValidateBeforeCall(communityId, addCommunityAdminRequest, _callback);
        Type localVarReturnType = new TypeToken<AddCommunityAdminResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCommunity
     * @param createCommunityRequest CreateCommunityRequest aggregate fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If community was created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommunityCall(CreateCommunityRequest createCommunityRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createCommunityRequest;

        // create path and map variables
        String localVarPath = "/communities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommunityValidateBeforeCall(CreateCommunityRequest createCommunityRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createCommunityRequest' is set
        if (createCommunityRequest == null) {
            throw new ApiException("Missing the required parameter 'createCommunityRequest' when calling createCommunity(Async)");
        }
        

        okhttp3.Call localVarCall = createCommunityCall(createCommunityRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new community
     * @param createCommunityRequest CreateCommunityRequest aggregate fields (required)
     * @return CreateCommunityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If community was created </td><td>  -  </td></tr>
     </table>
     */
    public CreateCommunityResponse createCommunity(CreateCommunityRequest createCommunityRequest) throws ApiException {
        ApiResponse<CreateCommunityResponse> localVarResp = createCommunityWithHttpInfo(createCommunityRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new community
     * @param createCommunityRequest CreateCommunityRequest aggregate fields (required)
     * @return ApiResponse&lt;CreateCommunityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If community was created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCommunityResponse> createCommunityWithHttpInfo(CreateCommunityRequest createCommunityRequest) throws ApiException {
        okhttp3.Call localVarCall = createCommunityValidateBeforeCall(createCommunityRequest, null);
        Type localVarReturnType = new TypeToken<CreateCommunityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new community
     * @param createCommunityRequest CreateCommunityRequest aggregate fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If community was created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommunityAsync(CreateCommunityRequest createCommunityRequest, final ApiCallback<CreateCommunityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommunityValidateBeforeCall(createCommunityRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCommunityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCommunity
     * @param communityId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If community was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommunityCall(String communityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommunityValidateBeforeCall(String communityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling deleteCommunity(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCommunityCall(communityId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletion community with given community id
     * @param communityId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If community was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCommunity(String communityId) throws ApiException {
        deleteCommunityWithHttpInfo(communityId);
    }

    /**
     * 
     * Deletion community with given community id
     * @param communityId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If community was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCommunityWithHttpInfo(String communityId) throws ApiException {
        okhttp3.Call localVarCall = deleteCommunityValidateBeforeCall(communityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletion community with given community id
     * @param communityId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If community was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommunityAsync(String communityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommunityValidateBeforeCall(communityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllCommunity
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of communities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllCommunityCall(Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllCommunityValidateBeforeCall(Pageable pageable, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAllCommunityCall(pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * List all communities which are registered
     * @param pageable  (optional)
     * @return GetCommunityDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of communities </td><td>  -  </td></tr>
     </table>
     */
    public GetCommunityDetailsResponse listAllCommunity(Pageable pageable) throws ApiException {
        ApiResponse<GetCommunityDetailsResponse> localVarResp = listAllCommunityWithHttpInfo(pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * List all communities which are registered
     * @param pageable  (optional)
     * @return ApiResponse&lt;GetCommunityDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of communities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCommunityDetailsResponse> listAllCommunityWithHttpInfo(Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listAllCommunityValidateBeforeCall(pageable, null);
        Type localVarReturnType = new TypeToken<GetCommunityDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all communities which are registered
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of communities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllCommunityAsync(Pageable pageable, final ApiCallback<GetCommunityDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllCommunityValidateBeforeCall(pageable, _callback);
        Type localVarReturnType = new TypeToken<GetCommunityDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCommunityAdmins
     * @param communityId  (required)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunityAdminsCall(String communityId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/admins"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommunityAdminsValidateBeforeCall(String communityId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling listCommunityAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = listCommunityAdminsCall(communityId, pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * List all admins of the community given a community id
     * @param communityId  (required)
     * @param pageable  (optional)
     * @return ListCommunityAdminsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ListCommunityAdminsResponse listCommunityAdmins(String communityId, Pageable pageable) throws ApiException {
        ApiResponse<ListCommunityAdminsResponse> localVarResp = listCommunityAdminsWithHttpInfo(communityId, pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * List all admins of the community given a community id
     * @param communityId  (required)
     * @param pageable  (optional)
     * @return ApiResponse&lt;ListCommunityAdminsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCommunityAdminsResponse> listCommunityAdminsWithHttpInfo(String communityId, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listCommunityAdminsValidateBeforeCall(communityId, pageable, null);
        Type localVarReturnType = new TypeToken<ListCommunityAdminsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all admins of the community given a community id
     * @param communityId  (required)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunityAdminsAsync(String communityId, Pageable pageable, final ApiCallback<ListCommunityAdminsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommunityAdminsValidateBeforeCall(communityId, pageable, _callback);
        Type localVarReturnType = new TypeToken<ListCommunityAdminsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCommunityDetails
     * @param communityId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunityDetailsCall(String communityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommunityDetailsValidateBeforeCall(String communityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling listCommunityDetails(Async)");
        }
        

        okhttp3.Call localVarCall = listCommunityDetailsCall(communityId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get details about the community given a community id
     * @param communityId  (required)
     * @return GetCommunityDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public GetCommunityDetailsResponse listCommunityDetails(String communityId) throws ApiException {
        ApiResponse<GetCommunityDetailsResponse> localVarResp = listCommunityDetailsWithHttpInfo(communityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get details about the community given a community id
     * @param communityId  (required)
     * @return ApiResponse&lt;GetCommunityDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCommunityDetailsResponse> listCommunityDetailsWithHttpInfo(String communityId) throws ApiException {
        okhttp3.Call localVarCall = listCommunityDetailsValidateBeforeCall(communityId, null);
        Type localVarReturnType = new TypeToken<GetCommunityDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get details about the community given a community id
     * @param communityId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunityDetailsAsync(String communityId, final ApiCallback<GetCommunityDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommunityDetailsValidateBeforeCall(communityId, _callback);
        Type localVarReturnType = new TypeToken<GetCommunityDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAdminFromCommunity
     * @param communityId  (required)
     * @param adminId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admin was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAdminFromCommunityCall(String communityId, String adminId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/admins/{adminId}"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()))
            .replaceAll("\\{" + "adminId" + "\\}", localVarApiClient.escapeString(adminId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAdminFromCommunityValidateBeforeCall(String communityId, String adminId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling removeAdminFromCommunity(Async)");
        }
        
        // verify the required parameter 'adminId' is set
        if (adminId == null) {
            throw new ApiException("Missing the required parameter 'adminId' when calling removeAdminFromCommunity(Async)");
        }
        

        okhttp3.Call localVarCall = removeAdminFromCommunityCall(communityId, adminId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove of admin associated with a community
     * @param communityId  (required)
     * @param adminId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admin was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void removeAdminFromCommunity(String communityId, String adminId) throws ApiException {
        removeAdminFromCommunityWithHttpInfo(communityId, adminId);
    }

    /**
     * 
     * Remove of admin associated with a community
     * @param communityId  (required)
     * @param adminId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admin was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAdminFromCommunityWithHttpInfo(String communityId, String adminId) throws ApiException {
        okhttp3.Call localVarCall = removeAdminFromCommunityValidateBeforeCall(communityId, adminId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove of admin associated with a community
     * @param communityId  (required)
     * @param adminId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If admin was removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAdminFromCommunityAsync(String communityId, String adminId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAdminFromCommunityValidateBeforeCall(communityId, adminId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
