/*
 * Swagger MyHome - OpenAPI 3.0
 * This is a OpenApi specification for MyHome backend service.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddAmenityRequest;
import org.openapitools.client.model.AddAmenityResponse;
import org.openapitools.client.model.GetAmenityDetailsResponse;
import java.util.Set;
import org.openapitools.client.model.UpdateAmenityRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AmenitiesApi {
    private ApiClient localVarApiClient;

    public AmenitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AmenitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addAmenityToCommunity
     * @param communityId  (required)
     * @param addAmenityRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If amenity add successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If community not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAmenityToCommunityCall(String communityId, AddAmenityRequest addAmenityRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addAmenityRequest;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/amenities"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAmenityToCommunityValidateBeforeCall(String communityId, AddAmenityRequest addAmenityRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling addAmenityToCommunity(Async)");
        }
        

        okhttp3.Call localVarCall = addAmenityToCommunityCall(communityId, addAmenityRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Adds amenity to community
     * @param communityId  (required)
     * @param addAmenityRequest  (optional)
     * @return AddAmenityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If amenity add successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If community not found </td><td>  -  </td></tr>
     </table>
     */
    public AddAmenityResponse addAmenityToCommunity(String communityId, AddAmenityRequest addAmenityRequest) throws ApiException {
        ApiResponse<AddAmenityResponse> localVarResp = addAmenityToCommunityWithHttpInfo(communityId, addAmenityRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds amenity to community
     * @param communityId  (required)
     * @param addAmenityRequest  (optional)
     * @return ApiResponse&lt;AddAmenityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If amenity add successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If community not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddAmenityResponse> addAmenityToCommunityWithHttpInfo(String communityId, AddAmenityRequest addAmenityRequest) throws ApiException {
        okhttp3.Call localVarCall = addAmenityToCommunityValidateBeforeCall(communityId, addAmenityRequest, null);
        Type localVarReturnType = new TypeToken<AddAmenityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds amenity to community
     * @param communityId  (required)
     * @param addAmenityRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If amenity add successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If community not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAmenityToCommunityAsync(String communityId, AddAmenityRequest addAmenityRequest, final ApiCallback<AddAmenityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAmenityToCommunityValidateBeforeCall(communityId, addAmenityRequest, _callback);
        Type localVarReturnType = new TypeToken<AddAmenityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAmenity
     * @param amenityId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If amenity deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAmenityCall(String amenityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amenities/{amenityId}"
            .replaceAll("\\{" + "amenityId" + "\\}", localVarApiClient.escapeString(amenityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAmenityValidateBeforeCall(String amenityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'amenityId' is set
        if (amenityId == null) {
            throw new ApiException("Missing the required parameter 'amenityId' when calling deleteAmenity(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAmenityCall(amenityId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove amenity
     * @param amenityId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If amenity deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAmenity(String amenityId) throws ApiException {
        deleteAmenityWithHttpInfo(amenityId);
    }

    /**
     * 
     * Remove amenity
     * @param amenityId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If amenity deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAmenityWithHttpInfo(String amenityId) throws ApiException {
        okhttp3.Call localVarCall = deleteAmenityValidateBeforeCall(amenityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove amenity
     * @param amenityId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If amenity deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAmenityAsync(String amenityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAmenityValidateBeforeCall(amenityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAmenityDetails
     * @param amenityId Id of the amenity to get details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If details found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmenityDetailsCall(String amenityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amenities/{amenityId}"
            .replaceAll("\\{" + "amenityId" + "\\}", localVarApiClient.escapeString(amenityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAmenityDetailsValidateBeforeCall(String amenityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'amenityId' is set
        if (amenityId == null) {
            throw new ApiException("Missing the required parameter 'amenityId' when calling getAmenityDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getAmenityDetailsCall(amenityId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get details about the amenity
     * @param amenityId Id of the amenity to get details (required)
     * @return GetAmenityDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If details found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public GetAmenityDetailsResponse getAmenityDetails(String amenityId) throws ApiException {
        ApiResponse<GetAmenityDetailsResponse> localVarResp = getAmenityDetailsWithHttpInfo(amenityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get details about the amenity
     * @param amenityId Id of the amenity to get details (required)
     * @return ApiResponse&lt;GetAmenityDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If details found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAmenityDetailsResponse> getAmenityDetailsWithHttpInfo(String amenityId) throws ApiException {
        okhttp3.Call localVarCall = getAmenityDetailsValidateBeforeCall(amenityId, null);
        Type localVarReturnType = new TypeToken<GetAmenityDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get details about the amenity
     * @param amenityId Id of the amenity to get details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If details found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAmenityDetailsAsync(String amenityId, final ApiCallback<GetAmenityDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAmenityDetailsValidateBeforeCall(amenityId, _callback);
        Type localVarReturnType = new TypeToken<GetAmenityDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllAmenities
     * @param communityId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of amenities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllAmenitiesCall(String communityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/amenities"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAmenitiesValidateBeforeCall(String communityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling listAllAmenities(Async)");
        }
        

        okhttp3.Call localVarCall = listAllAmenitiesCall(communityId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get all amenities of community
     * @param communityId  (required)
     * @return Set&lt;GetAmenityDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of amenities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public Set<GetAmenityDetailsResponse> listAllAmenities(String communityId) throws ApiException {
        ApiResponse<Set<GetAmenityDetailsResponse>> localVarResp = listAllAmenitiesWithHttpInfo(communityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all amenities of community
     * @param communityId  (required)
     * @return ApiResponse&lt;Set&lt;GetAmenityDetailsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of amenities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<GetAmenityDetailsResponse>> listAllAmenitiesWithHttpInfo(String communityId) throws ApiException {
        okhttp3.Call localVarCall = listAllAmenitiesValidateBeforeCall(communityId, null);
        Type localVarReturnType = new TypeToken<Set<GetAmenityDetailsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all amenities of community
     * @param communityId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of amenities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllAmenitiesAsync(String communityId, final ApiCallback<Set<GetAmenityDetailsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAmenitiesValidateBeforeCall(communityId, _callback);
        Type localVarReturnType = new TypeToken<Set<GetAmenityDetailsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAmenity
     * @param amenityId  (required)
     * @param updateAmenityRequest UpdateAmenityRequest update amenity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If amenity is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAmenityCall(String amenityId, UpdateAmenityRequest updateAmenityRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAmenityRequest;

        // create path and map variables
        String localVarPath = "/amenities/{amenityId}"
            .replaceAll("\\{" + "amenityId" + "\\}", localVarApiClient.escapeString(amenityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAmenityValidateBeforeCall(String amenityId, UpdateAmenityRequest updateAmenityRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'amenityId' is set
        if (amenityId == null) {
            throw new ApiException("Missing the required parameter 'amenityId' when calling updateAmenity(Async)");
        }
        
        // verify the required parameter 'updateAmenityRequest' is set
        if (updateAmenityRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAmenityRequest' when calling updateAmenity(Async)");
        }
        

        okhttp3.Call localVarCall = updateAmenityCall(amenityId, updateAmenityRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update an amenity
     * @param amenityId  (required)
     * @param updateAmenityRequest UpdateAmenityRequest update amenity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If amenity is not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateAmenity(String amenityId, UpdateAmenityRequest updateAmenityRequest) throws ApiException {
        updateAmenityWithHttpInfo(amenityId, updateAmenityRequest);
    }

    /**
     * 
     * Update an amenity
     * @param amenityId  (required)
     * @param updateAmenityRequest UpdateAmenityRequest update amenity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If amenity is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAmenityWithHttpInfo(String amenityId, UpdateAmenityRequest updateAmenityRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAmenityValidateBeforeCall(amenityId, updateAmenityRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update an amenity
     * @param amenityId  (required)
     * @param updateAmenityRequest UpdateAmenityRequest update amenity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If amenity is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAmenityAsync(String amenityId, UpdateAmenityRequest updateAmenityRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAmenityValidateBeforeCall(amenityId, updateAmenityRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
