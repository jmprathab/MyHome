/*
 * Swagger MyHome - OpenAPI 3.0
 * This is a OpenApi specification for MyHome backend service.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddCommunityHouseRequest;
import org.openapitools.client.model.AddCommunityHouseResponse;
import org.openapitools.client.model.AddHouseMemberRequest;
import org.openapitools.client.model.AddHouseMemberResponse;
import org.openapitools.client.model.GetHouseDetailsResponse;
import org.openapitools.client.model.ListHouseMembersResponse;
import org.openapitools.client.model.Pageable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HousesApi {
    private ApiClient localVarApiClient;

    public HousesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HousesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCommunityHouses
     * @param communityId  (required)
     * @param addCommunityHouseRequest AddCommunityHouseRequest aggregate fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If houses were added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommunityHousesCall(String communityId, AddCommunityHouseRequest addCommunityHouseRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addCommunityHouseRequest;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/houses"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommunityHousesValidateBeforeCall(String communityId, AddCommunityHouseRequest addCommunityHouseRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling addCommunityHouses(Async)");
        }
        
        // verify the required parameter 'addCommunityHouseRequest' is set
        if (addCommunityHouseRequest == null) {
            throw new ApiException("Missing the required parameter 'addCommunityHouseRequest' when calling addCommunityHouses(Async)");
        }
        

        okhttp3.Call localVarCall = addCommunityHousesCall(communityId, addCommunityHouseRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add a new house to the community given a community id
     * @param communityId  (required)
     * @param addCommunityHouseRequest AddCommunityHouseRequest aggregate fields (required)
     * @return AddCommunityHouseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If houses were added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public AddCommunityHouseResponse addCommunityHouses(String communityId, AddCommunityHouseRequest addCommunityHouseRequest) throws ApiException {
        ApiResponse<AddCommunityHouseResponse> localVarResp = addCommunityHousesWithHttpInfo(communityId, addCommunityHouseRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new house to the community given a community id
     * @param communityId  (required)
     * @param addCommunityHouseRequest AddCommunityHouseRequest aggregate fields (required)
     * @return ApiResponse&lt;AddCommunityHouseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If houses were added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddCommunityHouseResponse> addCommunityHousesWithHttpInfo(String communityId, AddCommunityHouseRequest addCommunityHouseRequest) throws ApiException {
        okhttp3.Call localVarCall = addCommunityHousesValidateBeforeCall(communityId, addCommunityHouseRequest, null);
        Type localVarReturnType = new TypeToken<AddCommunityHouseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new house to the community given a community id
     * @param communityId  (required)
     * @param addCommunityHouseRequest AddCommunityHouseRequest aggregate fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If houses were added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommunityHousesAsync(String communityId, AddCommunityHouseRequest addCommunityHouseRequest, final ApiCallback<AddCommunityHouseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommunityHousesValidateBeforeCall(communityId, addCommunityHouseRequest, _callback);
        Type localVarReturnType = new TypeToken<AddCommunityHouseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addHouseMembers
     * @param houseId  (required)
     * @param addHouseMemberRequest AddHouseMemberRequest aggregate fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If members were added to house </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If parameters are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addHouseMembersCall(String houseId, AddHouseMemberRequest addHouseMemberRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addHouseMemberRequest;

        // create path and map variables
        String localVarPath = "/houses/{houseId}/members"
            .replaceAll("\\{" + "houseId" + "\\}", localVarApiClient.escapeString(houseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addHouseMembersValidateBeforeCall(String houseId, AddHouseMemberRequest addHouseMemberRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'houseId' is set
        if (houseId == null) {
            throw new ApiException("Missing the required parameter 'houseId' when calling addHouseMembers(Async)");
        }
        
        // verify the required parameter 'addHouseMemberRequest' is set
        if (addHouseMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'addHouseMemberRequest' when calling addHouseMembers(Async)");
        }
        

        okhttp3.Call localVarCall = addHouseMembersCall(houseId, addHouseMemberRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add new members to the house given a house id. Responds with member id which were added
     * @param houseId  (required)
     * @param addHouseMemberRequest AddHouseMemberRequest aggregate fields (required)
     * @return AddHouseMemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If members were added to house </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If parameters are invalid </td><td>  -  </td></tr>
     </table>
     */
    public AddHouseMemberResponse addHouseMembers(String houseId, AddHouseMemberRequest addHouseMemberRequest) throws ApiException {
        ApiResponse<AddHouseMemberResponse> localVarResp = addHouseMembersWithHttpInfo(houseId, addHouseMemberRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add new members to the house given a house id. Responds with member id which were added
     * @param houseId  (required)
     * @param addHouseMemberRequest AddHouseMemberRequest aggregate fields (required)
     * @return ApiResponse&lt;AddHouseMemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If members were added to house </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If parameters are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddHouseMemberResponse> addHouseMembersWithHttpInfo(String houseId, AddHouseMemberRequest addHouseMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = addHouseMembersValidateBeforeCall(houseId, addHouseMemberRequest, null);
        Type localVarReturnType = new TypeToken<AddHouseMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add new members to the house given a house id. Responds with member id which were added
     * @param houseId  (required)
     * @param addHouseMemberRequest AddHouseMemberRequest aggregate fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If members were added to house </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If parameters are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addHouseMembersAsync(String houseId, AddHouseMemberRequest addHouseMemberRequest, final ApiCallback<AddHouseMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addHouseMembersValidateBeforeCall(houseId, addHouseMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<AddHouseMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHouseMember
     * @param houseId  (required)
     * @param memberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house member was removed from house </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHouseMemberCall(String houseId, String memberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/houses/{houseId}/members/{memberId}"
            .replaceAll("\\{" + "houseId" + "\\}", localVarApiClient.escapeString(houseId.toString()))
            .replaceAll("\\{" + "memberId" + "\\}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHouseMemberValidateBeforeCall(String houseId, String memberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'houseId' is set
        if (houseId == null) {
            throw new ApiException("Missing the required parameter 'houseId' when calling deleteHouseMember(Async)");
        }
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteHouseMember(Async)");
        }
        

        okhttp3.Call localVarCall = deleteHouseMemberCall(houseId, memberId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletion of member associated with a house
     * @param houseId  (required)
     * @param memberId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house member was removed from house </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void deleteHouseMember(String houseId, String memberId) throws ApiException {
        deleteHouseMemberWithHttpInfo(houseId, memberId);
    }

    /**
     * 
     * Deletion of member associated with a house
     * @param houseId  (required)
     * @param memberId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house member was removed from house </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteHouseMemberWithHttpInfo(String houseId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = deleteHouseMemberValidateBeforeCall(houseId, memberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletion of member associated with a house
     * @param houseId  (required)
     * @param memberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house member was removed from house </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHouseMemberAsync(String houseId, String memberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHouseMemberValidateBeforeCall(houseId, memberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHouseDetails
     * @param houseId ID of the house to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHouseDetailsCall(String houseId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/houses/{houseId}"
            .replaceAll("\\{" + "houseId" + "\\}", localVarApiClient.escapeString(houseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHouseDetailsValidateBeforeCall(String houseId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'houseId' is set
        if (houseId == null) {
            throw new ApiException("Missing the required parameter 'houseId' when calling getHouseDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getHouseDetailsCall(houseId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get house detail by a given ID
     * @param houseId ID of the house to get (required)
     * @return GetHouseDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public GetHouseDetailsResponse getHouseDetails(String houseId) throws ApiException {
        ApiResponse<GetHouseDetailsResponse> localVarResp = getHouseDetailsWithHttpInfo(houseId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get house detail by a given ID
     * @param houseId ID of the house to get (required)
     * @return ApiResponse&lt;GetHouseDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHouseDetailsResponse> getHouseDetailsWithHttpInfo(String houseId) throws ApiException {
        okhttp3.Call localVarCall = getHouseDetailsValidateBeforeCall(houseId, null);
        Type localVarReturnType = new TypeToken<GetHouseDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get house detail by a given ID
     * @param houseId ID of the house to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHouseDetailsAsync(String houseId, final ApiCallback<GetHouseDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHouseDetailsValidateBeforeCall(houseId, _callback);
        Type localVarReturnType = new TypeToken<GetHouseDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllHouses
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllHousesCall(Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/houses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllHousesValidateBeforeCall(Pageable pageable, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAllHousesCall(pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * List all houses of the community given a community id
     * @param pageable  (optional)
     * @return GetHouseDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
     </table>
     */
    public GetHouseDetailsResponse listAllHouses(Pageable pageable) throws ApiException {
        ApiResponse<GetHouseDetailsResponse> localVarResp = listAllHousesWithHttpInfo(pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * List all houses of the community given a community id
     * @param pageable  (optional)
     * @return ApiResponse&lt;GetHouseDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHouseDetailsResponse> listAllHousesWithHttpInfo(Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listAllHousesValidateBeforeCall(pageable, null);
        Type localVarReturnType = new TypeToken<GetHouseDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all houses of the community given a community id
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllHousesAsync(Pageable pageable, final ApiCallback<GetHouseDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllHousesValidateBeforeCall(pageable, _callback);
        Type localVarReturnType = new TypeToken<GetHouseDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllMembersOfHouse
     * @param houseId  (required)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllMembersOfHouseCall(String houseId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/houses/{houseId}/members"
            .replaceAll("\\{" + "houseId" + "\\}", localVarApiClient.escapeString(houseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllMembersOfHouseValidateBeforeCall(String houseId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'houseId' is set
        if (houseId == null) {
            throw new ApiException("Missing the required parameter 'houseId' when calling listAllMembersOfHouse(Async)");
        }
        

        okhttp3.Call localVarCall = listAllMembersOfHouseCall(houseId, pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * List all members of the house given a house id
     * @param houseId  (required)
     * @param pageable  (optional)
     * @return ListHouseMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ListHouseMembersResponse listAllMembersOfHouse(String houseId, Pageable pageable) throws ApiException {
        ApiResponse<ListHouseMembersResponse> localVarResp = listAllMembersOfHouseWithHttpInfo(houseId, pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * List all members of the house given a house id
     * @param houseId  (required)
     * @param pageable  (optional)
     * @return ApiResponse&lt;ListHouseMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHouseMembersResponse> listAllMembersOfHouseWithHttpInfo(String houseId, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listAllMembersOfHouseValidateBeforeCall(houseId, pageable, null);
        Type localVarReturnType = new TypeToken<ListHouseMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all members of the house given a house id
     * @param houseId  (required)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If house present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllMembersOfHouseAsync(String houseId, Pageable pageable, final ApiCallback<ListHouseMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllMembersOfHouseValidateBeforeCall(houseId, pageable, _callback);
        Type localVarReturnType = new TypeToken<ListHouseMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCommunityHouses
     * @param communityId  (required)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunityHousesCall(String communityId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/houses"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommunityHousesValidateBeforeCall(String communityId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling listCommunityHouses(Async)");
        }
        

        okhttp3.Call localVarCall = listCommunityHousesCall(communityId, pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * List all houses of the community given a community id
     * @param communityId  (required)
     * @param pageable  (optional)
     * @return GetHouseDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public GetHouseDetailsResponse listCommunityHouses(String communityId, Pageable pageable) throws ApiException {
        ApiResponse<GetHouseDetailsResponse> localVarResp = listCommunityHousesWithHttpInfo(communityId, pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * List all houses of the community given a community id
     * @param communityId  (required)
     * @param pageable  (optional)
     * @return ApiResponse&lt;GetHouseDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHouseDetailsResponse> listCommunityHousesWithHttpInfo(String communityId, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listCommunityHousesValidateBeforeCall(communityId, pageable, null);
        Type localVarReturnType = new TypeToken<GetHouseDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all houses of the community given a community id
     * @param communityId  (required)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If community exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunityHousesAsync(String communityId, Pageable pageable, final ApiCallback<GetHouseDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommunityHousesValidateBeforeCall(communityId, pageable, _callback);
        Type localVarReturnType = new TypeToken<GetHouseDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCommunityHouse
     * @param communityId  (required)
     * @param houseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house was removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCommunityHouseCall(String communityId, String houseId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/houses/{houseId}"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()))
            .replaceAll("\\{" + "houseId" + "\\}", localVarApiClient.escapeString(houseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCommunityHouseValidateBeforeCall(String communityId, String houseId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling removeCommunityHouse(Async)");
        }
        
        // verify the required parameter 'houseId' is set
        if (houseId == null) {
            throw new ApiException("Missing the required parameter 'houseId' when calling removeCommunityHouse(Async)");
        }
        

        okhttp3.Call localVarCall = removeCommunityHouseCall(communityId, houseId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove of house from the community given a community id and a house id
     * @param communityId  (required)
     * @param houseId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house was removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void removeCommunityHouse(String communityId, String houseId) throws ApiException {
        removeCommunityHouseWithHttpInfo(communityId, houseId);
    }

    /**
     * 
     * Remove of house from the community given a community id and a house id
     * @param communityId  (required)
     * @param houseId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house was removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeCommunityHouseWithHttpInfo(String communityId, String houseId) throws ApiException {
        okhttp3.Call localVarCall = removeCommunityHouseValidateBeforeCall(communityId, houseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove of house from the community given a community id and a house id
     * @param communityId  (required)
     * @param houseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If house was removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCommunityHouseAsync(String communityId, String houseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCommunityHouseValidateBeforeCall(communityId, houseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
