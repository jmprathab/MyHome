/*
 * Swagger MyHome - OpenAPI 3.0
 * This is a OpenApi specification for MyHome backend service.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentsApi {
    private ApiClient localVarApiClient;

    public DocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteHouseMemberDocument
     * @param memberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHouseMemberDocumentCall(String memberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{memberId}/documents"
            .replaceAll("\\{" + "memberId" + "\\}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHouseMemberDocumentValidateBeforeCall(String memberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteHouseMemberDocument(Async)");
        }
        

        okhttp3.Call localVarCall = deleteHouseMemberDocumentCall(memberId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete house member&#39;s documents
     * @param memberId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void deleteHouseMemberDocument(String memberId) throws ApiException {
        deleteHouseMemberDocumentWithHttpInfo(memberId);
    }

    /**
     * 
     * Delete house member&#39;s documents
     * @param memberId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteHouseMemberDocumentWithHttpInfo(String memberId) throws ApiException {
        okhttp3.Call localVarCall = deleteHouseMemberDocumentValidateBeforeCall(memberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete house member&#39;s documents
     * @param memberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHouseMemberDocumentAsync(String memberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHouseMemberDocumentValidateBeforeCall(memberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHouseMemberDocument
     * @param memberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If document present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHouseMemberDocumentCall(String memberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{memberId}/documents"
            .replaceAll("\\{" + "memberId" + "\\}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/jpeg"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHouseMemberDocumentValidateBeforeCall(String memberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getHouseMemberDocument(Async)");
        }
        

        okhttp3.Call localVarCall = getHouseMemberDocumentCall(memberId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns house member&#39;s documents
     * @param memberId  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If document present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getHouseMemberDocument(String memberId) throws ApiException {
        ApiResponse<byte[]> localVarResp = getHouseMemberDocumentWithHttpInfo(memberId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns house member&#39;s documents
     * @param memberId  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If document present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getHouseMemberDocumentWithHttpInfo(String memberId) throws ApiException {
        okhttp3.Call localVarCall = getHouseMemberDocumentValidateBeforeCall(memberId, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns house member&#39;s documents
     * @param memberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If document present </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHouseMemberDocumentAsync(String memberId, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHouseMemberDocumentValidateBeforeCall(memberId, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHouseMemberDocument
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document update error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHouseMemberDocumentCall(String memberId, File memberDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{memberId}/documents"
            .replaceAll("\\{" + "memberId" + "\\}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (memberDocument != null) {
            localVarFormParams.put("memberDocument", memberDocument);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHouseMemberDocumentValidateBeforeCall(String memberId, File memberDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateHouseMemberDocument(Async)");
        }
        

        okhttp3.Call localVarCall = updateHouseMemberDocumentCall(memberId, memberDocument, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update house member&#39;s documents
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document update error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void updateHouseMemberDocument(String memberId, File memberDocument) throws ApiException {
        updateHouseMemberDocumentWithHttpInfo(memberId, memberDocument);
    }

    /**
     * 
     * Update house member&#39;s documents
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document update error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateHouseMemberDocumentWithHttpInfo(String memberId, File memberDocument) throws ApiException {
        okhttp3.Call localVarCall = updateHouseMemberDocumentValidateBeforeCall(memberId, memberDocument, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update house member&#39;s documents
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document updated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document update error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHouseMemberDocumentAsync(String memberId, File memberDocument, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHouseMemberDocumentValidateBeforeCall(memberId, memberDocument, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadHouseMemberDocument
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document saved </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document save error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadHouseMemberDocumentCall(String memberId, File memberDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{memberId}/documents"
            .replaceAll("\\{" + "memberId" + "\\}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (memberDocument != null) {
            localVarFormParams.put("memberDocument", memberDocument);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadHouseMemberDocumentValidateBeforeCall(String memberId, File memberDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling uploadHouseMemberDocument(Async)");
        }
        

        okhttp3.Call localVarCall = uploadHouseMemberDocumentCall(memberId, memberDocument, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add house member&#39;s documents
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document saved </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document save error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public void uploadHouseMemberDocument(String memberId, File memberDocument) throws ApiException {
        uploadHouseMemberDocumentWithHttpInfo(memberId, memberDocument);
    }

    /**
     * 
     * Add house member&#39;s documents
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document saved </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document save error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadHouseMemberDocumentWithHttpInfo(String memberId, File memberDocument) throws ApiException {
        okhttp3.Call localVarCall = uploadHouseMemberDocumentValidateBeforeCall(memberId, memberDocument, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add house member&#39;s documents
     * @param memberId  (required)
     * @param memberDocument  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If document saved </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If document save error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> If document file too large </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If params are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadHouseMemberDocumentAsync(String memberId, File memberDocument, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadHouseMemberDocumentValidateBeforeCall(memberId, memberDocument, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
