/*
 * Swagger MyHome - OpenAPI 3.0
 * This is a OpenApi specification for MyHome backend service.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListAdminPaymentsResponse;
import org.openapitools.client.model.ListMemberPaymentsResponse;
import org.openapitools.client.model.Pageable;
import org.openapitools.client.model.SchedulePaymentRequest;
import org.openapitools.client.model.SchedulePaymentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listAllAdminScheduledPayments
     * @param communityId The id of community (required)
     * @param adminId The id of admin (required)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If communityId and adminId are valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If communityId or adminId are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllAdminScheduledPaymentsCall(String communityId, String adminId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communities/{communityId}/admins/{adminId}/payments"
            .replaceAll("\\{" + "communityId" + "\\}", localVarApiClient.escapeString(communityId.toString()))
            .replaceAll("\\{" + "adminId" + "\\}", localVarApiClient.escapeString(adminId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAdminScheduledPaymentsValidateBeforeCall(String communityId, String adminId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'communityId' is set
        if (communityId == null) {
            throw new ApiException("Missing the required parameter 'communityId' when calling listAllAdminScheduledPayments(Async)");
        }
        
        // verify the required parameter 'adminId' is set
        if (adminId == null) {
            throw new ApiException("Missing the required parameter 'adminId' when calling listAllAdminScheduledPayments(Async)");
        }
        

        okhttp3.Call localVarCall = listAllAdminScheduledPaymentsCall(communityId, adminId, pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get all payments scheduled by the specified admin
     * @param communityId The id of community (required)
     * @param adminId The id of admin (required)
     * @param pageable  (optional)
     * @return ListAdminPaymentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If communityId and adminId are valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If communityId or adminId are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ListAdminPaymentsResponse listAllAdminScheduledPayments(String communityId, String adminId, Pageable pageable) throws ApiException {
        ApiResponse<ListAdminPaymentsResponse> localVarResp = listAllAdminScheduledPaymentsWithHttpInfo(communityId, adminId, pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all payments scheduled by the specified admin
     * @param communityId The id of community (required)
     * @param adminId The id of admin (required)
     * @param pageable  (optional)
     * @return ApiResponse&lt;ListAdminPaymentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If communityId and adminId are valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If communityId or adminId are invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAdminPaymentsResponse> listAllAdminScheduledPaymentsWithHttpInfo(String communityId, String adminId, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listAllAdminScheduledPaymentsValidateBeforeCall(communityId, adminId, pageable, null);
        Type localVarReturnType = new TypeToken<ListAdminPaymentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all payments scheduled by the specified admin
     * @param communityId The id of community (required)
     * @param adminId The id of admin (required)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If communityId and adminId are valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If communityId or adminId are invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllAdminScheduledPaymentsAsync(String communityId, String adminId, Pageable pageable, final ApiCallback<ListAdminPaymentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAdminScheduledPaymentsValidateBeforeCall(communityId, adminId, pageable, _callback);
        Type localVarReturnType = new TypeToken<ListAdminPaymentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllMemberPayments
     * @param memberId Member Id to use for getting all payments (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If memberId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If memberId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllMemberPaymentsCall(String memberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{memberId}/payments"
            .replaceAll("\\{" + "memberId" + "\\}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllMemberPaymentsValidateBeforeCall(String memberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listAllMemberPayments(Async)");
        }
        

        okhttp3.Call localVarCall = listAllMemberPaymentsCall(memberId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get all payments for the specified member
     * @param memberId Member Id to use for getting all payments (required)
     * @return ListMemberPaymentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If memberId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If memberId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public ListMemberPaymentsResponse listAllMemberPayments(String memberId) throws ApiException {
        ApiResponse<ListMemberPaymentsResponse> localVarResp = listAllMemberPaymentsWithHttpInfo(memberId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all payments for the specified member
     * @param memberId Member Id to use for getting all payments (required)
     * @return ApiResponse&lt;ListMemberPaymentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If memberId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If memberId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMemberPaymentsResponse> listAllMemberPaymentsWithHttpInfo(String memberId) throws ApiException {
        okhttp3.Call localVarCall = listAllMemberPaymentsValidateBeforeCall(memberId, null);
        Type localVarReturnType = new TypeToken<ListMemberPaymentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all payments for the specified member
     * @param memberId Member Id to use for getting all payments (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If memberId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If memberId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllMemberPaymentsAsync(String memberId, final ApiCallback<ListMemberPaymentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllMemberPaymentsValidateBeforeCall(memberId, _callback);
        Type localVarReturnType = new TypeToken<ListMemberPaymentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPaymentDetails
     * @param paymentId Payment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If payment is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If paymentId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPaymentDetailsCall(String paymentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{paymentId}"
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaymentDetailsValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling listPaymentDetails(Async)");
        }
        

        okhttp3.Call localVarCall = listPaymentDetailsCall(paymentId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get details about a payment with the given payment id
     * @param paymentId Payment ID (required)
     * @return SchedulePaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If payment is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If paymentId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public SchedulePaymentResponse listPaymentDetails(String paymentId) throws ApiException {
        ApiResponse<SchedulePaymentResponse> localVarResp = listPaymentDetailsWithHttpInfo(paymentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get details about a payment with the given payment id
     * @param paymentId Payment ID (required)
     * @return ApiResponse&lt;SchedulePaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If payment is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If paymentId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulePaymentResponse> listPaymentDetailsWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = listPaymentDetailsValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<SchedulePaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get details about a payment with the given payment id
     * @param paymentId Payment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If payment is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If paymentId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPaymentDetailsAsync(String paymentId, final ApiCallback<SchedulePaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaymentDetailsValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<SchedulePaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulePayment
     * @param schedulePaymentRequest CreateUserRequest aggregate fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If schedule payment is created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePaymentCall(SchedulePaymentRequest schedulePaymentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = schedulePaymentRequest;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulePaymentValidateBeforeCall(SchedulePaymentRequest schedulePaymentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'schedulePaymentRequest' is set
        if (schedulePaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'schedulePaymentRequest' when calling schedulePayment(Async)");
        }
        

        okhttp3.Call localVarCall = schedulePaymentCall(schedulePaymentRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Schedule a new payment
     * @param schedulePaymentRequest CreateUserRequest aggregate fields (required)
     * @return SchedulePaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If schedule payment is created </td><td>  -  </td></tr>
     </table>
     */
    public SchedulePaymentResponse schedulePayment(SchedulePaymentRequest schedulePaymentRequest) throws ApiException {
        ApiResponse<SchedulePaymentResponse> localVarResp = schedulePaymentWithHttpInfo(schedulePaymentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Schedule a new payment
     * @param schedulePaymentRequest CreateUserRequest aggregate fields (required)
     * @return ApiResponse&lt;SchedulePaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If schedule payment is created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulePaymentResponse> schedulePaymentWithHttpInfo(SchedulePaymentRequest schedulePaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulePaymentValidateBeforeCall(schedulePaymentRequest, null);
        Type localVarReturnType = new TypeToken<SchedulePaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Schedule a new payment
     * @param schedulePaymentRequest CreateUserRequest aggregate fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If schedule payment is created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePaymentAsync(SchedulePaymentRequest schedulePaymentRequest, final ApiCallback<SchedulePaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulePaymentValidateBeforeCall(schedulePaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<SchedulePaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
