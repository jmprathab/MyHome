/*
 * Swagger MyHome - OpenAPI 3.0
 * This is a OpenApi specification for MyHome backend service.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.ForgotPasswordRequest;
import org.openapitools.client.model.GetUserDetailsResponse;
import org.openapitools.client.model.GetUserDetailsResponseUser;
import org.openapitools.client.model.ListHouseMembersResponse;
import org.openapitools.client.model.Pageable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for confirmEmail
     * @param userId Id of the user for confirm email (required)
     * @param emailConfirmToken Tocken from user email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email confirmation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmEmailCall(String userId, String emailConfirmToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/email-confirm/{emailConfirmToken}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "emailConfirmToken" + "\\}", localVarApiClient.escapeString(emailConfirmToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmEmailValidateBeforeCall(String userId, String emailConfirmToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling confirmEmail(Async)");
        }
        
        // verify the required parameter 'emailConfirmToken' is set
        if (emailConfirmToken == null) {
            throw new ApiException("Missing the required parameter 'emailConfirmToken' when calling confirmEmail(Async)");
        }
        

        okhttp3.Call localVarCall = confirmEmailCall(userId, emailConfirmToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * Confirm user email
     * @param userId Id of the user for confirm email (required)
     * @param emailConfirmToken Tocken from user email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email confirmation error </td><td>  -  </td></tr>
     </table>
     */
    public void confirmEmail(String userId, String emailConfirmToken) throws ApiException {
        confirmEmailWithHttpInfo(userId, emailConfirmToken);
    }

    /**
     * 
     * Confirm user email
     * @param userId Id of the user for confirm email (required)
     * @param emailConfirmToken Tocken from user email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email confirmation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmEmailWithHttpInfo(String userId, String emailConfirmToken) throws ApiException {
        okhttp3.Call localVarCall = confirmEmailValidateBeforeCall(userId, emailConfirmToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Confirm user email
     * @param userId Id of the user for confirm email (required)
     * @param emailConfirmToken Tocken from user email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email confirmation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmEmailAsync(String userId, String emailConfirmToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmEmailValidateBeforeCall(userId, emailConfirmToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserDetails
     * @param userId ID of the user to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If userId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If userId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDetailsCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDetailsValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getUserDetailsCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get details of a user given userId
     * @param userId ID of the user to get (required)
     * @return GetUserDetailsResponseUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If userId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If userId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public GetUserDetailsResponseUser getUserDetails(String userId) throws ApiException {
        ApiResponse<GetUserDetailsResponseUser> localVarResp = getUserDetailsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get details of a user given userId
     * @param userId ID of the user to get (required)
     * @return ApiResponse&lt;GetUserDetailsResponseUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If userId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If userId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserDetailsResponseUser> getUserDetailsWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserDetailsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<GetUserDetailsResponseUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get details of a user given userId
     * @param userId ID of the user to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If userId is valid. Response body has the details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If userId is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDetailsAsync(String userId, final ApiCallback<GetUserDetailsResponseUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDetailsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<GetUserDetailsResponseUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllHousemates
     * @param userId ID of the user for which to find housemates (required)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of all members from all houses of the specified user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllHousematesCall(String userId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/housemates"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllHousematesValidateBeforeCall(String userId, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listAllHousemates(Async)");
        }
        

        okhttp3.Call localVarCall = listAllHousematesCall(userId, pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * Lists all members from all houses of a user
     * @param userId ID of the user for which to find housemates (required)
     * @param pageable  (optional)
     * @return ListHouseMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of all members from all houses of the specified user </td><td>  -  </td></tr>
     </table>
     */
    public ListHouseMembersResponse listAllHousemates(String userId, Pageable pageable) throws ApiException {
        ApiResponse<ListHouseMembersResponse> localVarResp = listAllHousematesWithHttpInfo(userId, pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all members from all houses of a user
     * @param userId ID of the user for which to find housemates (required)
     * @param pageable  (optional)
     * @return ApiResponse&lt;ListHouseMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of all members from all houses of the specified user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHouseMembersResponse> listAllHousematesWithHttpInfo(String userId, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listAllHousematesValidateBeforeCall(userId, pageable, null);
        Type localVarReturnType = new TypeToken<ListHouseMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all members from all houses of a user
     * @param userId ID of the user for which to find housemates (required)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of all members from all houses of the specified user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllHousematesAsync(String userId, Pageable pageable, final ApiCallback<ListHouseMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllHousematesValidateBeforeCall(userId, pageable, _callback);
        Type localVarReturnType = new TypeToken<ListHouseMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllUsers
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllUsersCall(Pageable pageable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllUsersValidateBeforeCall(Pageable pageable, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAllUsersCall(pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * Lists all users
     * @param pageable  (optional)
     * @return GetUserDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of users </td><td>  -  </td></tr>
     </table>
     */
    public GetUserDetailsResponse listAllUsers(Pageable pageable) throws ApiException {
        ApiResponse<GetUserDetailsResponse> localVarResp = listAllUsersWithHttpInfo(pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all users
     * @param pageable  (optional)
     * @return ApiResponse&lt;GetUserDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserDetailsResponse> listAllUsersWithHttpInfo(Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(pageable, null);
        Type localVarReturnType = new TypeToken<GetUserDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all users
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllUsersAsync(Pageable pageable, final ApiCallback<GetUserDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(pageable, _callback);
        Type localVarReturnType = new TypeToken<GetUserDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendConfirmEmailMail
     * @param userId ID of the user for resend confirm email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully send </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email send error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendConfirmEmailMailCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/email-confirm-resend"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendConfirmEmailMailValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling resendConfirmEmailMail(Async)");
        }
        

        okhttp3.Call localVarCall = resendConfirmEmailMailCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Resend email confirm mail
     * @param userId ID of the user for resend confirm email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully send </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email send error </td><td>  -  </td></tr>
     </table>
     */
    public void resendConfirmEmailMail(String userId) throws ApiException {
        resendConfirmEmailMailWithHttpInfo(userId);
    }

    /**
     * 
     * Resend email confirm mail
     * @param userId ID of the user for resend confirm email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully send </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email send error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendConfirmEmailMailWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = resendConfirmEmailMailValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resend email confirm mail
     * @param userId ID of the user for resend confirm email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email was successfully send </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email send error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendConfirmEmailMailAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendConfirmEmailMailValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signUp
     * @param createUserRequest CreateUserRequest aggregate fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If user created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If user already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signUpCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signUpValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling signUp(Async)");
        }
        

        okhttp3.Call localVarCall = signUpCall(createUserRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new user
     * @param createUserRequest CreateUserRequest aggregate fields (required)
     * @return CreateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If user created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If user already exists </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserResponse signUp(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<CreateUserResponse> localVarResp = signUpWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new user
     * @param createUserRequest CreateUserRequest aggregate fields (required)
     * @return ApiResponse&lt;CreateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If user created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If user already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserResponse> signUpWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = signUpValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<CreateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new user
     * @param createUserRequest CreateUserRequest aggregate fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If user created </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If user already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signUpAsync(CreateUserRequest createUserRequest, final ApiCallback<CreateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signUpValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPasswordPost
     * @param action Acton with user password (forgot or reset) (required)
     * @param forgotPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If password reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If wrong password reset token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPasswordPostCall(String action, ForgotPasswordRequest forgotPasswordRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = forgotPasswordRequest;

        // create path and map variables
        String localVarPath = "/users/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPasswordPostValidateBeforeCall(String action, ForgotPasswordRequest forgotPasswordRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling usersPasswordPost(Async)");
        }
        
        // verify the required parameter 'forgotPasswordRequest' is set
        if (forgotPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'forgotPasswordRequest' when calling usersPasswordPost(Async)");
        }
        

        okhttp3.Call localVarCall = usersPasswordPostCall(action, forgotPasswordRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Request reset password or reset password
     * @param action Acton with user password (forgot or reset) (required)
     * @param forgotPasswordRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If password reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If wrong password reset token </td><td>  -  </td></tr>
     </table>
     */
    public void usersPasswordPost(String action, ForgotPasswordRequest forgotPasswordRequest) throws ApiException {
        usersPasswordPostWithHttpInfo(action, forgotPasswordRequest);
    }

    /**
     * 
     * Request reset password or reset password
     * @param action Acton with user password (forgot or reset) (required)
     * @param forgotPasswordRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If password reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If wrong password reset token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersPasswordPostWithHttpInfo(String action, ForgotPasswordRequest forgotPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = usersPasswordPostValidateBeforeCall(action, forgotPasswordRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Request reset password or reset password
     * @param action Acton with user password (forgot or reset) (required)
     * @param forgotPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If password reset </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If wrong password reset token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPasswordPostAsync(String action, ForgotPasswordRequest forgotPasswordRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPasswordPostValidateBeforeCall(action, forgotPasswordRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
