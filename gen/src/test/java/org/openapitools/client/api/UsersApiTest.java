/*
 * Swagger MyHome - OpenAPI 3.0
 * This is a OpenApi specification for MyHome backend service.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.ForgotPasswordRequest;
import org.openapitools.client.model.GetUserDetailsResponse;
import org.openapitools.client.model.GetUserDetailsResponseUser;
import org.openapitools.client.model.ListHouseMembersResponse;
import org.openapitools.client.model.Pageable;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * 
     *
     * Confirm user email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmEmailTest() throws ApiException {
        String userId = null;
        String emailConfirmToken = null;
        api.confirmEmail(userId, emailConfirmToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get details of a user given userId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserDetailsTest() throws ApiException {
        String userId = null;
        GetUserDetailsResponseUser response = api.getUserDetails(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all members from all houses of a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllHousematesTest() throws ApiException {
        String userId = null;
        Pageable pageable = null;
        ListHouseMembersResponse response = api.listAllHousemates(userId, pageable);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists all users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllUsersTest() throws ApiException {
        Pageable pageable = null;
        GetUserDetailsResponse response = api.listAllUsers(pageable);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Resend email confirm mail
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendConfirmEmailMailTest() throws ApiException {
        String userId = null;
        api.resendConfirmEmailMail(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signUpTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        CreateUserResponse response = api.signUp(createUserRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request reset password or reset password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPasswordPostTest() throws ApiException {
        String action = null;
        ForgotPasswordRequest forgotPasswordRequest = null;
        api.usersPasswordPost(action, forgotPasswordRequest);

        // TODO: test validations
    }
    
}
